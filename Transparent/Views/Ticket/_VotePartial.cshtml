@model Transparent.Business.ViewModels.VoteViewModel
@using Transparent.Data.Models
@using (Ajax.BeginForm("_SetVote", new AjaxOptions { UpdateTargetId = "votePartial" }))
{
    @Html.AntiForgeryToken();
    @Html.HiddenFor(m => m.TicketId);
    var buttonClassFor = (Model.UserVote == Stance.For ? "inset" : "outset") + " for";
    var buttonClassAgainst = (Model.UserVote == Stance.Against ? "inset" : "outset") + " against";
    <table>
        <tr>
            <td>
                @(Model.UserMayVote?"Vote":"Votes")&nbsp;
            </td>
            <td class="@buttonClassFor">
            @if(Model.UserMayVote)
            {
                <button name="newVote" class="@buttonClassFor" title="For" value="@(Model.UserVote == Stance.For ? Stance.Neutral : Stance.For)">For</button>
            }
            else
            {
                <text>For</text>
            }
            </td>
            <td class="@buttonClassAgainst">
            @if(Model.UserMayVote)
            {
                <button name="newVote" class="@buttonClassAgainst" title="Against" value="@(Model.UserVote == Stance.Against ? Stance.Neutral : Stance.Against)">Against</button>
            }
            else
            {
                <text>Against</text>
            }
            </td>
        </tr>
        <tr>
            <td></td>
            <td style="text-align:center">
                @Html.DisplayFor(model => model.VotesFor)
            </td>
            <td style="text-align: center">
                @Html.DisplayFor(model => model.VotesAgainst)
            </td>
        </tr>
    </table>
}
