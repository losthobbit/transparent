@model Transparent.Data.Models.Tag
@using Castle.Windsor
@using Transparent.Data.Interfaces
@using Transparent.Business.Interfaces
@using Transparent.Data.Models

@{
    ViewBag.Title = "Learn";
    var container = ((IContainerAccessor)Context.ApplicationInstance).Container;
    var tags = container.Resolve<ITags>();
    var tickets = container.Resolve<ITickets>();
    var user = container.Resolve<IUser>();
    var configuration = container.Resolve<IConfiguration>();
    var pointsForTag = user.GetPointsForTag(WebSecurity.CurrentUserId, Model.Id);
    var inCompetentParentsTags = user.GetIncompetentParentsTags(WebSecurity.CurrentUserId, Model.Id);
}

<canvas id="tagDiagram" width="660" height="300" style="border:1px solid #FFFFFF;">
</canvas>
<script src="/Scripts/tags.boxes-0001.js"></script>
<script>
    $(function () {
        var model = @tags.SerializeTag(Model);
        var actionUrl = "@Url.Action("Details", new { id = "" })";
        drawTags(model, actionUrl);

        $("#takeTestButton").click(function(e) {
            e.preventDefault();
            var deductPoints = @Json.Encode(pointsForTag > configuration.PointsRequiredToBeCompetent);
            if(deductPoints)
                TakeTestPrompt();
            else
                TakeTest();
        });
    });

    function TakeTest() {
        window.location.href = "@Url.Action("TakeTest", "Ticket", new { tagId = Model.Id })";
    }

    function TakeTestPrompt() {
        if(confirm("Taking a test deducts @configuration.PointsToDeductWhenStartingTest points, which you get back when your answer is marked as good.\nAre you ready?"))
            TakeTest();
    }
</script>
<fieldset>
    <legend>Tag</legend>
    <div class="display-field">
        <h2>@Html.DisplayFor(model => model.Name)</h2>
        <p>You have @pointsForTag points for @Model.Name</p>
        @{
        if(inCompetentParentsTags.Any())
        {
            <i>Take more tests to show your competence in @String.Join(", ", inCompetentParentsTags.Select(tag => tag.Name)) before taking tests in @Model.Name</i>
        }
        else
        {
            var numberOfTests = tickets.CountUntakenTestsRemaining(Model.Id, WebSecurity.CurrentUserId);
            if (numberOfTests > 0)
            {
                <a id="takeTestButton" class="button">Take a test</a><text>(</text>@Html.Raw(numberOfTests)<text> remaining)</text>
            }
            else
            {
                <i>All tests have been taken.</i>
            }
        }
        }
    </div>
    <div class="display-field">
        @Html.DisplayFor(model => model.Description)
    </div>
</fieldset>
